{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO0dZY1/qk48CL48OPez21Z"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#HR-Genetic Algorithms"],"metadata":{"id":"t6Qc1Y_MUhQr"}},{"cell_type":"markdown","source":["import libary"],"metadata":{"id":"92i0XZjsDvWp"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"9tIJOxcQAR9l"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import random\n","import matplotlib.pyplot as plt\n"]},{"cell_type":"code","source":["# df = pd.read_csv('HR.csv')\n","url='https://drive.google.com/file/d/1uzkJ-dwvb4MrgqOeDE11nqRFGAdwfz9F/view?usp=share_link'\n","file_id=url.split('/')[-2]\n","print(file_id)\n","dwn_url='https://drive.google.com/uc?id=' + file_id\n","df = pd.read_csv(dwn_url)"],"metadata":{"id":"QBnd1OwXDuye","executionInfo":{"status":"ok","timestamp":1675320514126,"user_tz":-420,"elapsed":1101,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7bc3725a-d904-4ad0-d510-536fc358d1a9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1uzkJ-dwvb4MrgqOeDE11nqRFGAdwfz9F\n"]}]},{"cell_type":"code","source":["df\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"6WbT08Q2D3T5","executionInfo":{"status":"ok","timestamp":1675319158643,"user_tz":-420,"elapsed":4,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"25270976-425d-4d75-ee9a-938e2ceff8e8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     gender department  weight  height  age\n","0      Male          R      89     172   32\n","1      Male          R      89     180   52\n","2      Male          R      52     158   27\n","3      Male          R      50     157   39\n","4      Male          R      68     174   25\n","..      ...        ...     ...     ...  ...\n","353  Female          J      73     168   38\n","354  Female          J      68     169   59\n","355  Female          J      49     155   33\n","356  Female          J     101     187   60\n","357  Female          J      88     172   38\n","\n","[358 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-c7f76960-cd94-48de-a46e-aa48518ff97d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>department</th>\n","      <th>weight</th>\n","      <th>height</th>\n","      <th>age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Male</td>\n","      <td>R</td>\n","      <td>89</td>\n","      <td>172</td>\n","      <td>32</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Male</td>\n","      <td>R</td>\n","      <td>89</td>\n","      <td>180</td>\n","      <td>52</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Male</td>\n","      <td>R</td>\n","      <td>52</td>\n","      <td>158</td>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Male</td>\n","      <td>R</td>\n","      <td>50</td>\n","      <td>157</td>\n","      <td>39</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Male</td>\n","      <td>R</td>\n","      <td>68</td>\n","      <td>174</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>353</th>\n","      <td>Female</td>\n","      <td>J</td>\n","      <td>73</td>\n","      <td>168</td>\n","      <td>38</td>\n","    </tr>\n","    <tr>\n","      <th>354</th>\n","      <td>Female</td>\n","      <td>J</td>\n","      <td>68</td>\n","      <td>169</td>\n","      <td>59</td>\n","    </tr>\n","    <tr>\n","      <th>355</th>\n","      <td>Female</td>\n","      <td>J</td>\n","      <td>49</td>\n","      <td>155</td>\n","      <td>33</td>\n","    </tr>\n","    <tr>\n","      <th>356</th>\n","      <td>Female</td>\n","      <td>J</td>\n","      <td>101</td>\n","      <td>187</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>357</th>\n","      <td>Female</td>\n","      <td>J</td>\n","      <td>88</td>\n","      <td>172</td>\n","      <td>38</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>358 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c7f76960-cd94-48de-a46e-aa48518ff97d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c7f76960-cd94-48de-a46e-aa48518ff97d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c7f76960-cd94-48de-a46e-aa48518ff97d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"3-8wcNtSD_K0","executionInfo":{"status":"ok","timestamp":1675319160904,"user_tz":-420,"elapsed":4,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"cba0d77e-c754-41ea-a8dc-b5f683c066b6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           weight      height         age\n","count  358.000000  358.000000  358.000000\n","mean    72.108939  167.918994   41.237430\n","std     14.528707    9.558115   10.983412\n","min     38.000000  142.000000   22.000000\n","25%     61.000000  161.000000   32.000000\n","50%     70.000000  168.000000   41.000000\n","75%     84.000000  175.000000   51.000000\n","max    106.000000  195.000000   60.000000"],"text/html":["\n","  <div id=\"df-757dd989-ba5e-4ede-b316-85953d8f07ac\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>weight</th>\n","      <th>height</th>\n","      <th>age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>358.000000</td>\n","      <td>358.000000</td>\n","      <td>358.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>72.108939</td>\n","      <td>167.918994</td>\n","      <td>41.237430</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>14.528707</td>\n","      <td>9.558115</td>\n","      <td>10.983412</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>38.000000</td>\n","      <td>142.000000</td>\n","      <td>22.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>61.000000</td>\n","      <td>161.000000</td>\n","      <td>32.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>70.000000</td>\n","      <td>168.000000</td>\n","      <td>41.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>84.000000</td>\n","      <td>175.000000</td>\n","      <td>51.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>106.000000</td>\n","      <td>195.000000</td>\n","      <td>60.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-757dd989-ba5e-4ede-b316-85953d8f07ac')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-757dd989-ba5e-4ede-b316-85953d8f07ac button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-757dd989-ba5e-4ede-b316-85953d8f07ac');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df.nunique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E699byXrJKkN","executionInfo":{"status":"ok","timestamp":1675319163447,"user_tz":-420,"elapsed":3,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"95a33470-bf6f-46ac-a6be-cd1f2687b371"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["gender         2\n","department    19\n","weight        63\n","height        47\n","age           39\n","dtype: int64"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["- เท่าเทียม อายุ เพศ bmi\n","- สามัคคี\n","- สัมพันธ์ระหว่างแผนก\n","\n","2 สี"],"metadata":{"id":"x-9J_O4bF-wi"}},{"cell_type":"markdown","source":["![picture](https://www.researchgate.net/profile/Rodrigo-Reis-17/publication/340892707/figure/fig2/AS:999789642645506@1615379834179/Steps-of-genetic-algorithm-for-human-resource-allocation.ppm)"],"metadata":{"id":"v5yYmRp0oRBN"}},{"cell_type":"markdown","source":["![picture](https://www.researchgate.net/profile/Stefan-Elfwing-2/publication/267856080/figure/fig6/AS:669423161573389@1536614327688/One-point-crossover-between-two-bit-string-genotypes.png)"],"metadata":{"id":"bOz85-TyUnXE"}},{"cell_type":"markdown","source":["![picture](https://miro.medium.com/max/720/1*zF3DzW57qD_LOGO1jQwdcg.webp)"],"metadata":{"id":"MXFZTDk9xUa9"}},{"cell_type":"markdown","source":[],"metadata":{"id":"nPmyjnOjxSYK"}},{"cell_type":"markdown","source":["ลบ ช่องว่าง"],"metadata":{"id":"o-FQOIhyXGzV"}},{"cell_type":"code","source":["df['department'] = df['department'].str.strip()"],"metadata":{"id":"xcCfIZAiEDcu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["เพิ่ม col BMI"],"metadata":{"id":"wNMDdaEFnDmL"}},{"cell_type":"code","source":["df[\"BMI\"] = df[\"weight\"] / (df[\"height\"]/100)**2\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"x7nO0rT0G_Ln","executionInfo":{"status":"ok","timestamp":1675320527567,"user_tz":-420,"elapsed":8,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"1e3aae9a-b154-4380-df73-e987e3b67746"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     gender department  weight  height  age        BMI\n","0      Male          R      89     172   32  30.083829\n","1      Male          R      89     180   52  27.469136\n","2      Male          R      52     158   27  20.829995\n","3      Male          R      50     157   39  20.284799\n","4      Male          R      68     174   25  22.460034\n","..      ...        ...     ...     ...  ...        ...\n","353  Female          J      73     168   38  25.864512\n","354  Female          J      68     169   59  23.808690\n","355  Female          J      49     155   33  20.395421\n","356  Female          J     101     187   60  28.882725\n","357  Female          J      88     172   38  29.745809\n","\n","[358 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-542bbaba-f84c-4f59-9176-cbc4c59d3977\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>department</th>\n","      <th>weight</th>\n","      <th>height</th>\n","      <th>age</th>\n","      <th>BMI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Male</td>\n","      <td>R</td>\n","      <td>89</td>\n","      <td>172</td>\n","      <td>32</td>\n","      <td>30.083829</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Male</td>\n","      <td>R</td>\n","      <td>89</td>\n","      <td>180</td>\n","      <td>52</td>\n","      <td>27.469136</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Male</td>\n","      <td>R</td>\n","      <td>52</td>\n","      <td>158</td>\n","      <td>27</td>\n","      <td>20.829995</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Male</td>\n","      <td>R</td>\n","      <td>50</td>\n","      <td>157</td>\n","      <td>39</td>\n","      <td>20.284799</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Male</td>\n","      <td>R</td>\n","      <td>68</td>\n","      <td>174</td>\n","      <td>25</td>\n","      <td>22.460034</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>353</th>\n","      <td>Female</td>\n","      <td>J</td>\n","      <td>73</td>\n","      <td>168</td>\n","      <td>38</td>\n","      <td>25.864512</td>\n","    </tr>\n","    <tr>\n","      <th>354</th>\n","      <td>Female</td>\n","      <td>J</td>\n","      <td>68</td>\n","      <td>169</td>\n","      <td>59</td>\n","      <td>23.808690</td>\n","    </tr>\n","    <tr>\n","      <th>355</th>\n","      <td>Female</td>\n","      <td>J</td>\n","      <td>49</td>\n","      <td>155</td>\n","      <td>33</td>\n","      <td>20.395421</td>\n","    </tr>\n","    <tr>\n","      <th>356</th>\n","      <td>Female</td>\n","      <td>J</td>\n","      <td>101</td>\n","      <td>187</td>\n","      <td>60</td>\n","      <td>28.882725</td>\n","    </tr>\n","    <tr>\n","      <th>357</th>\n","      <td>Female</td>\n","      <td>J</td>\n","      <td>88</td>\n","      <td>172</td>\n","      <td>38</td>\n","      <td>29.745809</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>358 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-542bbaba-f84c-4f59-9176-cbc4c59d3977')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-542bbaba-f84c-4f59-9176-cbc4c59d3977 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-542bbaba-f84c-4f59-9176-cbc4c59d3977');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":48}]},{"cell_type":"markdown","source":["(bmi_mean1 - bmi_mean2)m + (age_mean1 - age_mean2)m + (c1-c2)m + (gender1-gender2)m"],"metadata":{"id":"jk2EuRb5S-jr"}},{"cell_type":"code","source":["def fitness1(groupteam):\n","    group1 = df[groupteam == 1] # select data index groupteam == 1\n","    group2 = df[groupteam == 0]\n","    fitness_score = 0\n","\n","    bmi_mean1, bmi_mean2 = group1['BMI'].mean(), group2['BMI'].mean()\n","    fitness_score += abs(bmi_mean1 - bmi_mean2)\n","\n","    age_mean1, age_mean2 = group1['age'].mean(), group2['age'].mean()\n","    fitness_score += abs(age_mean1 - age_mean2)\n","\n","    c1, c2 = group1['department'].value_counts(), group2['department'].value_counts()\n","    fitness_score += abs(c1-c2).mean()\n","\n","    gender1, gender2 = group1['gender'].value_counts(), group2['gender'].value_counts()\n","    fitness_score += abs(gender1-gender2).mean()\n","\n","    return fitness_score"],"metadata":{"id":"yHQt2RNRBhIg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["mutation ทำาการ random เปลี่ยน 0 เป็น 1"],"metadata":{"id":"NlxVaRjQ3LmW"}},{"cell_type":"code","source":["def mutation(team_set):\n","  random_index = random.randint(0, len(team_set)-1)\n","  mutated_individual = team_set.copy()\n","  mutated_individual[random_index] = 1 if team_set[random_index] == 0 else 0\n","  return mutated_individual"],"metadata":{"id":"pUBbnz8-NiIX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def crossover(team_set1, team_set2):\n","  random_index = random.randint(0, len(team_set1)-1)\n","  offspring1 = np.concatenate([team_set1[:random_index], team_set2[random_index:]])\n","  offspring2 = np.concatenate([team_set2[:random_index], team_set1[random_index:]])\n","  return offspring1, offspring2"],"metadata":{"id":"x9jJN8kTdovp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Select the best group top 10 Rank\n","\n","1.   population เป็น array 100 แบบ ขนาดเท่า จำนวนสมาชิกทั้งหมด \n","2.   fitness_scores เป็นแต้ม ของ array 100 แบบ \n","3.   num_parents จำนวน พ่อพันธ์\n","\n","Return TOP 10\n"],"metadata":{"id":"I2SaXzPftRRB"}},{"cell_type":"code","source":["def selection(population, fitness_scores, num_parents):\n","  parent_indices = np.argsort(fitness_scores)[:num_parents]\n","  parents = [population[i] for i in parent_indices]\n","  return parents"],"metadata":{"id":"98UJNm9vNr8t"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["ทำการสุ่ม 0-1 ตามจำนวนสมาชิกทั้งหมด 100 แบบ"],"metadata":{"id":"MUiA90V7mh_v"}},{"cell_type":"code","source":["population = [np.random.randint(0, 2, size=len(df)) for _ in range(100)]\n","print(len(population))\n","print(len(population[0]))\n","population[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d3zQMQoZI9u1","executionInfo":{"status":"ok","timestamp":1675321980089,"user_tz":-420,"elapsed":3,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"b1b0c3f6-003b-4d0c-ce17-d3e49723d42c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["100\n","358\n"]},{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0,\n","       0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1,\n","       0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,\n","       1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1,\n","       1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0,\n","       1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0,\n","       1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1,\n","       1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0,\n","       1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,\n","       1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1,\n","       0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1,\n","       0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0,\n","       0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0,\n","       1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,\n","       0, 0, 1, 0, 0, 0])"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["num_generations = 100\n","num_parents = 20 "],"metadata":{"id":"GRyRncUVT47j"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for generation in range(num_generations):\n","  fitness_scores = [fitness1(team_set) for team_set in population] # calculate fitness score\n","  parents = selection(population, fitness_scores, num_parents) # select rank top 10\n","  print(min(fitness_scores))\n","  team_sets = []\n","  for i in range(0, len(parents), 2): # step = 2 , start crossover \n","    if i + 1 < len(parents): # len parents = num_parents\n","      team_set1, team_set2 = crossover(parents[i], parents[i+1]) # (0,1),(2,3),(4,5)\n","      team_sets.append(team_set1)\n","      team_sets.append(team_set2)\n","    else: break # end crossover\n","  team_sets = [mutation(team_set) for team_set in team_sets] # matation\n","  population = parents + team_sets # final data in generation"],"metadata":{"id":"STZPhYWUrTiv","executionInfo":{"status":"ok","timestamp":1675322022498,"user_tz":-420,"elapsed":17056,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a2463132-4c2f-406f-9871-a179e8ed044a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3.3262375020546404\n","3.3262375020546404\n","3.3262375020546404\n","3.3262375020546404\n","3.3262375020546404\n","3.3262375020546404\n","3.3262375020546404\n","3.3262375020546404\n","3.3262375020546404\n","3.3262375020546404\n","3.3262375020546404\n","3.3184928841585357\n","3.3184928841585357\n","3.3184928841585357\n","3.3184928841585357\n","3.3184928841585357\n","3.3184928841585357\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.674466053243521\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.463594608239997\n","2.435845499785944\n","2.435845499785944\n","2.2397360951665513\n","2.2397360951665513\n","2.2397360951665513\n","2.2397360951665513\n","2.227481359674768\n","2.227481359674768\n","2.227481359674768\n","2.227481359674768\n","2.227481359674768\n","2.227481359674768\n","2.1871206976559088\n","2.1871206976559088\n","2.1871206976559088\n","2.1871206976559088\n","2.1871206976559088\n","2.1871206976559088\n","2.1871206976559088\n","2.1871206976559088\n","2.0681828820637076\n","2.0681828820637076\n","2.0681828820637076\n","2.0681828820637076\n","2.0681828820637076\n","2.0681828820637076\n","2.0681828820637076\n","2.0681828820637076\n","2.0681828820637076\n","2.0681828820637076\n","2.0681828820637076\n","2.0681828820637076\n","1.9814111506217544\n","1.9814111506217544\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"siqStGsqT4tM"}},{"cell_type":"code","source":["fitness_scores = [fitness1(team_set) for team_set in population]\n","best_team_set = population[np.argmin(fitness_scores)]\n","np.min(fitness_scores)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8kTv9ttVTypm","executionInfo":{"status":"ok","timestamp":1675320574395,"user_tz":-420,"elapsed":588,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"bbcdfa1a-3abf-46e9-9eaf-1d91711e335b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.3230838849822097"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["plt.plot(fitness_scores)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"QJrMy6KY9osf","executionInfo":{"status":"ok","timestamp":1675321859561,"user_tz":-420,"elapsed":6,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"02e0890f-9811-48da-d69f-84c2d68cb87e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f7e03de9040>]"]},"metadata":{},"execution_count":73},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["df[\"group\"] = best_team_set"],"metadata":{"id":"yg2cgVeCeMnA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.groupby(\"group\").mean().plot(kind=\"bar\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"bQ_UoQjNeRjk","executionInfo":{"status":"ok","timestamp":1675320591444,"user_tz":-420,"elapsed":405,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"3a74e893-207c-4980-cf48-9f3f06ed29e3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f7e04411e50>"]},"metadata":{},"execution_count":54},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["df[df['group'] == 1].mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wON9Sbz3jxD2","executionInfo":{"status":"ok","timestamp":1675320594424,"user_tz":-420,"elapsed":555,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"599c141f-c956-414e-f4d3-854d51742151"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-55-592df3c06ae4>:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n","  df[df['group'] == 1].mean()\n"]},{"output_type":"execute_result","data":{"text/plain":["weight     72.368715\n","height    168.212291\n","age        41.229050\n","BMI        25.297001\n","group       1.000000\n","dtype: float64"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["df[df['group'] == 0].mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D9Nn5_WEeUCP","executionInfo":{"status":"ok","timestamp":1675320597899,"user_tz":-420,"elapsed":1324,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"1c2dc021-60a9-46ca-f6a2-9f8839f38d3f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-56-71df49d2b1ac>:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n","  df[df['group'] == 0].mean()\n"]},{"output_type":"execute_result","data":{"text/plain":["weight     71.849162\n","height    167.625698\n","age        41.245810\n","BMI        25.268454\n","group       0.000000\n","dtype: float64"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["df.groupby(['group', 'gender']).size().reset_index(name='counts')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"okAz3omJkLAM","executionInfo":{"status":"ok","timestamp":1675320604019,"user_tz":-420,"elapsed":359,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"afaf04f3-27a2-43c1-899a-e743cd76df2b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   group  gender  counts\n","0      0  Female     118\n","1      0    Male      61\n","2      1  Female     118\n","3      1    Male      61"],"text/html":["\n","  <div id=\"df-f783f275-ba2c-4848-9766-46a82c268036\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>group</th>\n","      <th>gender</th>\n","      <th>counts</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>Female</td>\n","      <td>118</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>Male</td>\n","      <td>61</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>Female</td>\n","      <td>118</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>Male</td>\n","      <td>61</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f783f275-ba2c-4848-9766-46a82c268036')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f783f275-ba2c-4848-9766-46a82c268036 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f783f275-ba2c-4848-9766-46a82c268036');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["df['gender'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9Yg2591-nnrE","executionInfo":{"status":"ok","timestamp":1675320608431,"user_tz":-420,"elapsed":370,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"93cfbe7e-654e-49fd-83ab-8fd3584e76b1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Female    236\n","Male      122\n","Name: gender, dtype: int64"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["a = df[df['group']== 0].groupby(['department']).size()\n","b = df[df['group']== 1].groupby(['department']).size()\n","c =  pd.concat([a, b], axis=1)\n","print(c)\n","\n","dif =  abs( a - b ).reset_index(name='dif')\n","print(dif)\n","\n","plt.plot(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"tYyEY7zl1Ta4","executionInfo":{"status":"ok","timestamp":1675321741992,"user_tz":-420,"elapsed":1666,"user":{"displayName":"Thawatchai Buachan","userId":"04313601652228400658"}},"outputId":"c8b818ac-c8c3-4a73-d623-76b774f791fe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["               0   1\n","department          \n","A            3.0   3\n","C            3.0   3\n","D           36.0  36\n","E            7.0   7\n","F           13.0  15\n","G           19.0  21\n","H            5.0   5\n","I            3.0   4\n","J           14.0  15\n","K           11.0   8\n","L            6.0   4\n","M            6.0   8\n","N            4.0   4\n","O           16.0  16\n","P           10.0  12\n","Q            4.0   1\n","R           11.0  12\n","S            8.0   4\n","B            NaN   1\n","   department  dif\n","0           A  0.0\n","1           B  NaN\n","2           C  0.0\n","3           D  0.0\n","4           E  0.0\n","5           F  2.0\n","6           G  2.0\n","7           H  0.0\n","8           I  1.0\n","9           J  1.0\n","10          K  3.0\n","11          L  2.0\n","12          M  2.0\n","13          N  0.0\n","14          O  0.0\n","15          P  2.0\n","16          Q  3.0\n","17          R  1.0\n","18          S  4.0\n"]},{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f7e03e70550>,\n"," <matplotlib.lines.Line2D at 0x7f7e03e70640>]"]},"metadata":{},"execution_count":72},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[" "],"metadata":{"id":"s24rmICmP98w"},"execution_count":null,"outputs":[]}]}